// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct Cube {
    float3 position;
    float4 color;
};
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
//RWTexture2D<float4> Result;
RWStructuredBuffer<int> finalizou;
RWStructuredBuffer<float> Result;
RWStructuredBuffer<float> tempo;
RWStructuredBuffer<Cube> cubes;
int interactions;
//RWStructuredBuffer<uint> buffer;
//int maximo;
float massa;
float Dt;
float PosColisao;
float Posicao = 0;
float mover = 0;


//int tempo;
//conjunto de threads que sao agrupados em blocos, as vezes pode ser interessante trabalhar com 1 2 3... blocos de threads
//isso depende dos dados que estiverem sendo trabalhados.
[numthreads(10,1,1)] // define o tamanho do bloco, quantas threads existem no eixo x 8, y 8 z 1
void CSMain (uint3 id : SV_DispatchThreadID)
{

    float gravidade = 9.8; // vai receber 9.8
    float forca; // = massa * aceleracao
    float velocidade = 0;

        velocidade = gravidade * Dt/2;//(forca / massa); // gravidade * 10
        Posicao = velocidade * Dt; // + posicao inicial

    if (Posicao <= -PosColisao-.5)
    {
        mover = 0;
        Result[id.x] = Posicao;
       // finalizou[id.x] = mover;
        
    }
    else
    {
        mover = 1;
       // finalizou[id.x] = mover;
    }
    finalizou[id.x] = mover;

}


#pragma kernel velShare
[numthreads(10, 1, 1)]
void velShare(uint3 id : SV_DispatchThreadID) {
    if (Posicao <= -PosColisao - .75)
    {
        //Dt += 0.001;
        tempo[id.x] = Dt;
    }
}



#pragma kernel Cores

float rand(float2 co) {
    return (frac(sin(dot(co.xy, float2(12.9898, 78233))) * 43758.5453)) * 1;
}

[numthreads(10, 1, 1)] //nao vai precisar existir
void Cores(uint3 id : SV_DispatchThreadID)
{
    Cube cube = cubes[id.x];

    for (int i = 0; i < interactions; i++) {
        float _r = rand(float2(cube.color.r, cube.color.g));
        float _g =  rand(float2(cube.color.g, cube.color.b));
        float _b =  rand(float2(cube.color.r, cube.color.b));

        cube.color = float4(_r, _g, _b, 1);
    }

    cubes[id.x] = cube;
}
